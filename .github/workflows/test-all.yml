name: Test All Components

# This workflow runs all tests when changes affect multiple components
# or when explicitly triggered

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - 'assets/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - 'assets/**'
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to test (all, shell, go)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - shell
          - go

jobs:
  # Determine which tests to run based on changed files
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      shell: ${{ steps.filter.outputs.shell }}
      go: ${{ steps.filter.outputs.go }}
      workflows: ${{ steps.filter.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shell:
              - 'authaws'
              - 'ssm'
              - 'src/**'
              - 'tests/**'
              - 'tools/**'
              - 'install.sh'
              - 'uninstall.sh'
            go:
              - 'ztictl/**'
              - 'go.mod'
              - 'go.sum'
              - 'Makefile'
            workflows:
              - '.github/workflows/**'

  # Test shell scripts only if they changed
  test-shell:
    name: Test Shell Scripts
    needs: changes
    if: |
      needs.changes.outputs.shell == 'true' || 
      needs.changes.outputs.workflows == 'true' ||
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.component == 'all' || github.event.inputs.component == 'shell')
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install shellcheck
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update && sudo apt-get install -y shellcheck
        else
          brew install shellcheck
        fi
      shell: bash

    - name: Run shellcheck on shell scripts
      run: |
        echo "üîç Checking shell scripts..."
        shellcheck -x authaws ssm src/*.sh tools/*.sh install.sh uninstall.sh
        echo "‚úÖ Shell scripts passed validation"

    - name: Test shell script syntax
      run: |
        echo "üîç Testing shell script syntax..."
        for script in authaws ssm src/*.sh tools/*.sh; do
          if [ -f "$script" ]; then
            bash -n "$script" || exit 1
          fi
        done
        echo "‚úÖ Shell script syntax is valid"

  # Test Go code only if it changed
  test-go:
    name: Test Go Code
    needs: changes
    if: |
      needs.changes.outputs.go == 'true' || 
      needs.changes.outputs.workflows == 'true' ||
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.component == 'all' || github.event.inputs.component == 'go')
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Get dependencies
      working-directory: ./ztictl
      run: go mod download
    
    - name: Run tests
      working-directory: ./ztictl
      run: go test -v -race -coverprofile=coverage.out ./...
        
    - name: Run go vet
      working-directory: ./ztictl
      run: go vet ./...
      
    - name: Check formatting
      working-directory: ./ztictl
      shell: bash
      run: |
        # Check if any files need formatting
        UNFORMATTED=$(gofmt -s -l .)
        if [ -n "$UNFORMATTED" ]; then
          echo "‚ùå The following files are not formatted correctly:"
          echo "$UNFORMATTED"
          echo ""
          echo "Please run 'gofmt -s -w .' to fix formatting issues."
          exit 1
        fi
        echo "‚úÖ All Go files are properly formatted."
    
    - name: Test build
      working-directory: ./ztictl
      run: |
        go build -o ztictl${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cmd/ztictl
        echo "‚úÖ Build successful on ${{ matrix.os }}"

    - name: Upload coverage
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ztictl/coverage.out

  # Summary job to ensure all required tests pass
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [changes, test-shell, test-go]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "üìä Test Summary Report"
          echo "====================="
          
          # Check if shell tests were needed and passed
          if [[ "${{ needs.changes.outputs.shell }}" == "true" || "${{ needs.changes.outputs.workflows }}" == "true" ]]; then
            if [[ "${{ needs.test-shell.result }}" == "success" ]]; then
              echo "‚úÖ Shell script tests: PASSED"
            elif [[ "${{ needs.test-shell.result }}" == "skipped" ]]; then
              echo "‚è≠Ô∏è Shell script tests: SKIPPED (no changes)"
            else
              echo "‚ùå Shell script tests: FAILED"
              exit 1
            fi
          else
            echo "‚è≠Ô∏è Shell script tests: SKIPPED (no changes)"
          fi
          
          # Check if Go tests were needed and passed
          if [[ "${{ needs.changes.outputs.go }}" == "true" || "${{ needs.changes.outputs.workflows }}" == "true" ]]; then
            if [[ "${{ needs.test-go.result }}" == "success" ]]; then
              echo "‚úÖ Go code tests: PASSED"
            elif [[ "${{ needs.test-go.result }}" == "skipped" ]]; then
              echo "‚è≠Ô∏è Go code tests: SKIPPED (no changes)"
            else
              echo "‚ùå Go code tests: FAILED"
              exit 1
            fi
          else
            echo "‚è≠Ô∏è Go code tests: SKIPPED (no changes)"
          fi
          
          echo ""
          echo "‚ú® All required tests completed successfully!"