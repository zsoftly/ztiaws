name: Auto-Generate Release Documentation

on:
  push:
    branches:
      - 'release/*'

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Need full history for changelog generation
        
    - name: Extract version from branch name
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/heads/release/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Get latest release tag
      id: latest_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"
        
    - name: Generate CHANGELOG.md
      run: |
        # Create new changelog content
        echo "# Changelog" > CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        echo "## [${{ steps.version.outputs.version }}] - $(date +%Y-%m-%d)" >> CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        
        if [ -n "${{ steps.latest_tag.outputs.latest_tag }}" ]; then
          # Get commits since last tag and categorize them
          COMMITS=$(git log --pretty=format:"%s" --no-merges ${{ steps.latest_tag.outputs.latest_tag }}..HEAD)
        else
          # Get all commits if no previous tag
          COMMITS=$(git log --pretty=format:"%s" --no-merges)
        fi
        
        # Categorize commits
        FEATURES=""
        FIXES=""
        OTHER=""
        
        while IFS= read -r commit; do
          if [[ "$commit" =~ ^(feat|feature|add) ]]; then
            FEATURES="$FEATURES- $commit"$'\n'
          elif [[ "$commit" =~ ^(fix|bug) ]]; then
            FIXES="$FIXES- $commit"$'\n'
          else
            OTHER="$OTHER- $commit"$'\n'
          fi
        done <<< "$COMMITS"
        
        # Add categorized changes
        if [ -n "$FEATURES" ]; then
          echo "### Added" >> CHANGELOG_NEW.md
          echo "$FEATURES" >> CHANGELOG_NEW.md
        fi
        
        if [ -n "$FIXES" ]; then
          echo "### Fixed" >> CHANGELOG_NEW.md
          echo "$FIXES" >> CHANGELOG_NEW.md
        fi
        
        if [ -n "$OTHER" ]; then
          echo "### Changed" >> CHANGELOG_NEW.md
          echo "$OTHER" >> CHANGELOG_NEW.md
        fi
        
        echo "" >> CHANGELOG_NEW.md
        
        # Append existing changelog content (skip first 2 lines if it exists)
        if [ -f CHANGELOG.md ]; then
          tail -n +3 CHANGELOG.md >> CHANGELOG_NEW.md 2>/dev/null || true
        fi
        
        mv CHANGELOG_NEW.md CHANGELOG.md
        
    - name: Generate RELEASE_NOTES.txt
      run: |
        echo "# Release Notes - ${{ steps.version.outputs.version }}" > RELEASE_NOTES.txt
        echo "" >> RELEASE_NOTES.txt
        echo "**Release Date:** $(date '+%B %d, %Y')" >> RELEASE_NOTES.txt
        echo "" >> RELEASE_NOTES.txt
        
        if [ -n "${{ steps.latest_tag.outputs.latest_tag }}" ]; then
          COMMITS=$(git log --pretty=format:"%s" --no-merges ${{ steps.latest_tag.outputs.latest_tag }}..HEAD)
        else
          COMMITS=$(git log --pretty=format:"%s" --no-merges)
        fi
        
        # Categorize commits for release notes
        FEATURES=""
        FIXES=""
        OTHER=""
        
        while IFS= read -r commit; do
          if [[ "$commit" =~ ^(feat|feature|add) ]]; then
            FEATURES="$FEATURES• $commit"$'\n'
          elif [[ "$commit" =~ ^(fix|bug) ]]; then
            FIXES="$FIXES• $commit"$'\n'
          else
            OTHER="$OTHER• $commit"$'\n'
          fi
        done <<< "$COMMITS"
        
        # Add sections with emojis
        if [ -n "$FEATURES" ]; then
          echo "## 🚀 New Features" >> RELEASE_NOTES.txt
          echo "$FEATURES" >> RELEASE_NOTES.txt
        fi
        
        if [ -n "$FIXES" ]; then
          echo "## 🐛 Bug Fixes" >> RELEASE_NOTES.txt
          echo "$FIXES" >> RELEASE_NOTES.txt
        fi
        
        if [ -n "$OTHER" ]; then
          echo "## 📝 Other Changes" >> RELEASE_NOTES.txt
          echo "$OTHER" >> RELEASE_NOTES.txt
        fi
        
    - name: Commit generated documentation
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md RELEASE_NOTES.txt
        git diff --staged --quiet || git commit -m "Auto-generate changelog and release notes for ${{ steps.version.outputs.version }}"
        git push
