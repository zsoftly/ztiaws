#!/bin/bash

# Enhanced authaws script with both positional and flag-based parameter support
# Maintains backward compatibility while adding enterprise-friendly flags

# Set script directory and source path
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$SCRIPT_DIR/.env"

# Color codes for output (using tput for better compatibility)
if [[ -t 1 ]] && [[ "${TERM:-}" != "dumb" ]] && [[ "${NO_COLOR:-}" != "1" ]] && command -v tput &> /dev/null; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    NC=$(tput sgr0)
elif [[ -t 1 ]] && [[ "${TERM:-}" != "dumb" ]] && [[ "${NO_COLOR:-}" != "1" ]]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
else
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# Default values
DEFAULT_PROFILE=""
SSO_START_URL=""
SSO_REGION=""
PROFILE_NAME=""
SHOW_CREDS=false
CHECK_DEPS=false
SHOW_HELP=false

# Function to display help
show_help() {
    cat << EOF
${BLUE}authaws${NC} - Streamlined AWS SSO authentication tool

${YELLOW}USAGE:${NC}
    Positional syntax (original):
        authaws [profile-name]     # Authenticate with specified profile
        authaws creds [profile]    # Show credentials for profile
        authaws check              # Check dependencies
        authaws help               # Show this help

    Flag syntax (new):
        authaws --profile <name>   # Authenticate with specified profile
        authaws --creds [--profile <name>]  # Show credentials
        authaws --check            # Check dependencies
        authaws --help             # Show this help

${YELLOW}EXAMPLES:${NC}
    # Authentication
    authaws dev-profile          # Original syntax
    authaws --profile dev-profile # New flag syntax
    
    # Show credentials
    authaws creds dev-profile    # Original syntax
    authaws --creds --profile dev-profile # New flag syntax
    
    # Check dependencies
    authaws check                # Original syntax
    authaws --check              # New flag syntax

${YELLOW}SETUP:${NC}
    Create a .env file in the same directory with:
        SSO_START_URL="https://your-sso-url.awsapps.com/start"
        SSO_REGION="your-region"
        DEFAULT_PROFILE="your-default-profile"

${YELLOW}REQUIREMENTS:${NC}
    - AWS CLI v2
    - jq (JSON processor)
    - fzf (fuzzy finder)
    - Valid AWS SSO configuration

EOF
}

# Function to check dependencies
check_dependencies() {
    echo -e "${BLUE}Checking dependencies...${NC}"
    
    local missing_deps=()
    
    # Check AWS CLI
    if ! command -v aws &> /dev/null; then
        missing_deps+=("aws-cli")
    fi
    
    # Check jq
    if ! command -v jq &> /dev/null; then
        missing_deps+=("jq")
    fi
    
    # Check fzf
    if ! command -v fzf &> /dev/null; then
        missing_deps+=("fzf")
    fi
    
    if [ ${#missing_deps[@]} -eq 0 ]; then
        echo -e "${GREEN}✓ All dependencies are installed${NC}"
        return 0
    else
        echo -e "${RED}✗ Missing dependencies:${NC}"
        for dep in "${missing_deps[@]}"; do
            echo -e "  - $dep"
        done
        return 1
    fi
}

# Function to load environment variables
load_env() {
    if [ -f "$ENV_FILE" ]; then
        source "$ENV_FILE"
        DEFAULT_PROFILE="${DEFAULT_PROFILE:-}"
        SSO_START_URL="${SSO_START_URL:-}"
        SSO_REGION="${SSO_REGION:-}"
    else
        echo -e "${YELLOW}Warning: .env file not found at $ENV_FILE${NC}"
        echo -e "${YELLOW}Creating template .env file...${NC}"
        cat > "$ENV_FILE" << EOF
# AWS SSO Configuration
SSO_START_URL="https://your-sso-url.awsapps.com/start"
SSO_REGION="your-region"
DEFAULT_PROFILE="your-default-profile"
EOF
        echo -e "${GREEN}Template .env file created. Please edit it with your AWS SSO details.${NC}"
        exit 1
    fi
}

# Function to show credentials
show_credentials() {
    local profile=${1:-$DEFAULT_PROFILE}
    
    if [ -z "$profile" ]; then
        echo -e "${RED}Error: No profile specified${NC}"
        return 1
    fi
    
    echo -e "${BLUE}Credentials for profile: $profile${NC}"
    
    # Check if profile exists
    if ! aws configure list-profiles | grep -q "^$profile$"; then
        echo -e "${RED}Error: Profile '$profile' not found${NC}"
        return 1
    fi
    
    # Get credentials
    local access_key=$(aws configure get aws_access_key_id --profile "$profile")
    local secret_key=$(aws configure get aws_secret_access_key --profile "$profile")
    local session_token=$(aws configure get aws_session_token --profile "$profile")
    
    echo -e "${GREEN}AWS_ACCESS_KEY_ID:${NC} $access_key"
    echo -e "${GREEN}AWS_SECRET_ACCESS_KEY:${NC} ${secret_key:0:8}..."
    echo -e "${GREEN}AWS_SESSION_TOKEN:${NC} ${session_token:0:20}..."
}

# Function to authenticate with AWS SSO
authenticate() {
    local profile=${1:-$DEFAULT_PROFILE}
    
    if [ -z "$profile" ]; then
        echo -e "${RED}Error: No profile specified${NC}"
        return 1
    fi
    
    echo -e "${BLUE}Authenticating with AWS SSO for profile: $profile${NC}"
    
    # Check if already authenticated
    if aws sts get-caller-identity --profile "$profile" &> /dev/null; then
        echo -e "${GREEN}✓ Already authenticated with profile: $profile${NC}"
        return 0
    fi
    
    # Start SSO login process
    echo -e "${YELLOW}Starting AWS SSO login...${NC}"
    aws sso login --profile "$profile"
    
    # Verify authentication
    if aws sts get-caller-identity --profile "$profile" &> /dev/null; then
        echo -e "${GREEN}✓ Successfully authenticated with profile: $profile${NC}"
        return 0
    else
        echo -e "${RED}✗ Authentication failed${NC}"
        return 1
    fi
}

# Function to parse command line arguments
parse_arguments() {
    local use_flags=false
    local args=("$@")
    
    # Check if any flags are present
    for arg in "${args[@]}"; do
        if [[ "$arg" == --* ]]; then
            use_flags=true
            break
        fi
    done
    
    if $use_flags; then
        # Parse flag-based arguments
        while [[ $# -gt 0 ]]; do
            case $1 in
                --profile|-p)
                    PROFILE_NAME="$2"
                    shift 2
                    ;;
                --creds|-c)
                    SHOW_CREDS=true
                    shift
                    ;;
                --check)
                    CHECK_DEPS=true
                    shift
                    ;;
                --help|-h)
                    SHOW_HELP=true
                    shift
                    ;;
                *)
                    echo -e "${RED}Unknown flag: $1${NC}"
                    echo -e "${YELLOW}Use 'authaws --help' for usage information${NC}"
                    exit 1
                    ;;
            esac
        done
    else
        # Parse positional arguments (original behavior)
        case ${1:-} in
            "check")
                CHECK_DEPS=true
                ;;
            "help")
                SHOW_HELP=true
                ;;
            "creds")
                SHOW_CREDS=true
                PROFILE_NAME="${2:-}"
                ;;
            "")
                # No arguments - use default profile
                PROFILE_NAME="$DEFAULT_PROFILE"
                ;;
            *)
                # First argument is profile name
                PROFILE_NAME="$1"
                ;;
        esac
    fi
}

# Main function
main() {
    # Parse arguments
    parse_arguments "$@"
    
    # Handle help first
    if $SHOW_HELP; then
        show_help
        exit 0
    fi
    
    # Handle dependency check
    if $CHECK_DEPS; then
        check_dependencies
        exit $?
    fi
    
    # Load environment variables
    load_env
    
    # Handle credentials display
    if $SHOW_CREDS; then
        show_credentials "$PROFILE_NAME"
        exit $?
    fi
    
    # Default action: authenticate
    authenticate "$PROFILE_NAME"
}

# Run main function with all arguments
main "$@"