#!/usr/bin/env bash

# AWS SSO Authentication Helper Script
# Version: 1.4.1
# Repository: https://github.com/ZSoftly/quickssm

set -e  # Exit on error
set -u  # Exit on undefined variables

# Get SCRIPT_DIR and source utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source utilities (like colors)
if [ -f "${SCRIPT_DIR}/src/00_utils.sh" ]; then
    # shellcheck source=./src/00_utils.sh
    source "${SCRIPT_DIR}/src/00_utils.sh"
elif [ -f "/usr/local/bin/src/00_utils.sh" ]; then # For system-wide installation
    # shellcheck source=/dev/null
    source "/usr/local/bin/src/00_utils.sh"
else
    # 00_utils.sh is mandatory
    echo "[ERROR] src/00_utils.sh not found. This script requires 00_utils.sh for color definitions and common functions." >&2
    echo "Please ensure src/00_utils.sh is present in the script directory or in /usr/local/bin/src/." >&2
    exit 1
fi

# Get the directory where the script is located
ENV_FILE="${SCRIPT_DIR}/.env"

# Initialize logging (writes to ~/logs by default)
init_logging "authaws" true

# Function to create a sample .env file
create_env_file() {
  cat > "${ENV_FILE}" << 'EOL'
# AWS SSO Configuration
# Replace these values with your organization's settings

# Your AWS SSO portal URL
SSO_START_URL="https://d-xxxxxxxxxx.awsapps.com/start"

# The AWS region where your SSO is configured
SSO_REGION="us-east-1"

# Default profile name to use when none is specified
DEFAULT_PROFILE="default-sso-profile"

# Log directory (optional)
# LOG_DIR="/custom/path/to/logs"
# If not specified, $HOME/logs will be used
EOL

  log_info "Created sample .env file at ${ENV_FILE}"
  log_info "Please edit it with your organization's settings."
  exit 1
}

# Display help information
show_help() {
  cat << 'EOL'
AWS SSO Authentication Helper

USAGE:
  authaws [PROFILE]                    # Positional syntax (current)
  authaws --profile PROFILE           # Flag syntax (new)

COMMANDS:
  authaws help, --help, -h            # Show this help message
  authaws version, --version, -v      # Show version information  
  authaws check, --check              # Check system requirements
  authaws creds [PROFILE]             # Show credentials (positional)
  authaws --creds --profile PROFILE   # Show credentials (flag)

SETUP:
  Before first use, create a .env file in the script directory with:
  SSO_START_URL="https://your-sso-url.awsapps.com/start"
  SSO_REGION="your-region"
  DEFAULT_PROFILE="your-default-profile"

EXAMPLES:
  # Authentication (both styles work identically)
  authaws dev-profile                  # Quick login (current style)
  authaws --profile dev-profile        # Self-documenting (new style)
  
  # System checks
  authaws check                        # Check dependencies
  authaws --check                      # Check dependencies (flag style)
  
  # Credential management
  authaws creds                        # Show default profile credentials
  authaws creds dev-profile            # Show specific profile credentials
  authaws --creds --profile dev-profile # Show credentials (flag style)

FLAGS:
  -p, --profile PROFILE               # Specify AWS SSO profile name
  -h, --help                          # Show this help message
  --check                             # Check system requirements
  --creds                             # Display profile credentials
  -v, --version                       # Show version information
  --export                            # Export credentials in environment format
  -r, --region                        # Override AWS region for the profile

Both positional and flag syntaxes are fully supported and produce identical results.
Choose the style that works best for your workflow and team preferences.
EOL
  exit 0
}

# Display version information
show_version() {
  cat << 'EOL'
authaws - AWS SSO Authentication Helper Script
Version: 1.4.1
Repository: https://github.com/ZSoftly/quickssm

Dependencies:
  - AWS CLI (required)
  - jq (required) 
  - fzf (required)

Environment:
  - Bash version: $BASH_VERSION
  - Operating System: $(uname -s)

For more information, visit: https://github.com/ZSoftly/quickssm
EOL
  exit 0
}

# Check system requirements
check_requirements() {
  local missing_deps=0

  # Check for required dependencies
  for dep in aws jq fzf; do
    if ! command -v "$dep" &> /dev/null; then
      log_error "Missing dependency: $dep"
      case "$dep" in
        aws)
          log_info "To install AWS CLI, follow: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
          ;;
        jq)
          log_info "To install jq, run: sudo apt-get install jq (Ubuntu/Debian) or brew install jq (macOS)"
          ;;
        fzf)
          log_info "To install fzf, run: sudo apt-get install fzf (Ubuntu/Debian) or brew install fzf (macOS)"
          ;;
      esac
      missing_deps=1
    fi
  done

  # Check AWS credentials
  if ! aws sts get-caller-identity >/dev/null 2>&1; then
    log_warn "AWS credentials are not configured or have expired"
    log_info "This is normal if you haven't logged in yet"
  fi

  if [ $missing_deps -eq 0 ]; then
    log_info "All dependencies met! ‚úÖ"
    return 0
  else
    return 1
  fi
}

# Find SSO token file and check validity
find_token_file() {
  find ~/.aws/sso/cache -name '*.json' -type f | while read -r file; do
    if jq -e '.startUrl' "$file" > /dev/null 2>&1; then
      echo "$file"
      return
    fi
  done
}

is_token_valid() {
  # Fix SC2155: Split declaration and assignment
  local expires_at
  expires_at=$(jq -r '.expiresAt' "$1")
  local current_time
  current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  [[ "$expires_at" > "$current_time" ]]
}

# Show decoded credentials for a profile
show_credentials() {
  local profile_name="$1"
  
  log_info "üîê Retrieving credentials for profile: $profile_name"
  
  # Check if the profile exists in AWS config
  if ! aws configure list --profile "$profile_name" &>/dev/null; then
    # If it's truly a non-existent profile, there will be no entry in ~/.aws/config
    if ! grep -q "\[profile $profile_name\]" ~/.aws/config 2>/dev/null; then
      log_error "‚ùå Profile '$profile_name' does not exist"
      log_info "You can create this profile by running: authaws $profile_name"
      return 1
    fi
  fi
  
  # Try to export credentials
  local creds_output
  if ! creds_output=$(aws configure export-credentials --profile "$profile_name" --format env 2>&1); then
    # Check if this is a credential error or some other issue
    if echo "$creds_output" | grep -q "The SSO session has expired or is invalid"; then
      log_error "‚ùå Your SSO session for profile '$profile_name' has expired"
      log_info "Please authenticate first by running: authaws $profile_name"
      return 1
    elif echo "$creds_output" | grep -q "NoCredentialProviders"; then
      log_error "‚ùå No credentials found for profile '$profile_name'"
      log_info "Please authenticate first by running: authaws $profile_name"
      return 1
    else
      log_error "‚ùå Failed to export credentials: $creds_output"
      log_info "Try authenticating with: authaws $profile_name"
      return 1
    fi
  fi
  
  # Display the credentials
  echo ""
  log_info "üîë AWS Credentials for profile: $profile_name"
  log_info "----------------------------------------"
  echo "$creds_output"
  log_info "----------------------------------------"
  log_info "To use these credentials in your current shell, run:"
  log_info "eval \$(aws configure export-credentials --profile $profile_name --format env)"
  
  return 0
}

parse_parameters() {
  local profile=""
  local command=""
  local region=""
  local export_format=""
  
  while [[ $# -gt 0 ]]; do
    case $1 in
      --profile|-p)
        if [[ -z "$2" || "$2" == --* ]]; then
          log_error "Error: --profile requires a profile name"
          exit 1
        fi
        profile="$2"
        shift 2
        ;;
      --check)
        command="check"
        shift
        ;;
      --creds)
        command="creds"
        shift
        ;;
      --help|-h)
        command="help"
        shift
        ;;
      --version|-v)
        command="version"
        shift
        ;;
      --export)
        export_format="env"  # Default to env format, could be extended later
        shift
        ;;
      --region|-r)
        if [[ -z "$2" || "$2" == --* ]]; then
          log_error "Error: --region requires a region name"
          exit 1
        fi
        region="$2"
        shift 2
        ;;
      # Handle old-style commands
      check|creds|help|version)
       # Only set command if not already set by flags
        if [[ -z "$command" ]]; then
          command="$1"
        else
          log_error "Multiple commands specified: '$command' and '$1'"
          exit 1
        fi
        shift
        ;;
      # Handle unknown flags
      --*)
        log_error "Unknown option: $1"
        log_info "Run 'authaws help' for usage information"
        exit 1
        ;;
      # Handle positional arguments (profile names)
      *)
        if [[ -z "$profile" ]]; then
          profile="$1"
        else
          # Check if this might be a second positional argument for old creds syntax
          if [[ "$command" == "creds" && -z "$PARSED_PROFILE" ]]; then
            # Handle: authaws creds profile-name
            profile="$1"
          else
            log_error "Multiple profile names specified: '$profile' and '$1'"
            exit 1
          fi
        fi
        shift
        ;;
    esac
  done
  
  # Validate command-flag combinations
  case "$command" in
    "check")
      if [[ -n "$profile" ]]; then
        log_warn "Profile specified with --check will be ignored"
      fi
      ;;
    "creds")
      # --creds requires a profile (either via flag or positional)
      if [[ -z "$profile" ]]; then
        # Try to get from environment or .env as fallback
        profile="${AWS_PROFILE:-}"
        if [[ -z "$profile" && -f "${ENV_FILE}" ]]; then
          # shellcheck source=.env
            # shellcheck disable=SC1091
          source "${ENV_FILE}"
          profile="$DEFAULT_PROFILE"
        fi
        if [[ -z "$profile" ]]; then
          log_error "No profile specified for credentials display"
          log_info "Usage: authaws --creds --profile <name> or authaws creds <name>"
          exit 1
        fi
      fi
      ;;
    "help"|"version")
      if [[ -n "$profile" ]]; then
        log_warn "Profile specified with --$command will be ignored"
      fi
      ;;
    "")
      # No command specified, this is authentication mode
      # Profile handling will be done in main()
      ;;
  esac

  # Set global variables for use in main function
  PARSED_COMMAND="$command"
  PARSED_PROFILE="$profile"
  PARSED_REGION="$region"
  PARSED_EXPORT_FORMAT="$export_format"
}

# Main function
main() {
    parse_parameters "$@"

  # Handle special commands first
  case "$PARSED_COMMAND" in
    "help")
      show_help
      ;;
    "version") 
      show_version
      ;;
    "check")
      if check_requirements; then
        log_info "System requirements check passed"
      else
        log_error "System requirements not met"
        exit 1
      fi
      exit 0
      ;;
    "creds")
      # Handle credentials display
      local cred_profile="$PARSED_PROFILE"
      if [[ -z "$cred_profile" ]]; then
        # Try current AWS_PROFILE or default from .env
        cred_profile="${AWS_PROFILE:-}"
        if [[ -z "$cred_profile" ]]; then
          # Check for .env file and load it
          if [[ -f "${ENV_FILE}" ]]; then
            # shellcheck source=.env
            # shellcheck disable=SC1091
            source "${ENV_FILE}"
            cred_profile="$DEFAULT_PROFILE"
          else
            log_error "No profile specified and no default profile found"
            log_info "Usage: $0 creds [profile-name] or $0 --creds --profile [profile-name]"
            exit 1
          fi
        fi
      fi
      show_credentials "$cred_profile"
      exit $?
      ;;
  esac

  # Check for .env file and load it
  if [[ -f "${ENV_FILE}" ]]; then
    # shellcheck source=.env
    # shellcheck disable=SC1091
    source "${ENV_FILE}"
  else
    log_warn "No .env file found in the script directory."
    # Fix SC2162: Add -r flag to read
    read -r -p "Would you like to create a sample .env file? (y/n): " create_env
    [[ $create_env =~ ^[Yy]$ ]] && create_env_file
    log_error "Cannot proceed without configuration. Please create a .env file."
    exit 1
  fi

  # Run the system checks
  if ! check_requirements; then
    log_error "Missing required dependencies. Please install them and try again."
    exit 1
  fi

  # Validate required environment variables
  for var in SSO_START_URL SSO_REGION DEFAULT_PROFILE; do
    if [[ -z "${!var:-}" ]]; then
      log_error "Missing required configuration in .env file: $var"
      exit 1
    fi
  done

  # Set profile name from argument or use default
  if [[ -n "$PARSED_PROFILE" ]]; then
    PROFILE_NAME="$PARSED_PROFILE"
    log_info "Using specified profile: $PROFILE_NAME"
  else
    log_info "No profile specified. Using default: $DEFAULT_PROFILE"
    read -r -p "Proceed with default profile? (y/n): " proceed
    if [[ $proceed =~ ^[Yy]$ ]]; then
      PROFILE_NAME="$DEFAULT_PROFILE"
    else
      log_info "Please run: $0 <profile-name> or $0 --profile <profile-name>"
      exit 1
    fi
  fi
  
  # Determine effective region (use override if provided, otherwise SSO_REGION from .env)
  local EFFECTIVE_REGION="${PARSED_REGION:-$SSO_REGION}"
  
  if [[ -n "$PARSED_REGION" ]]; then
    log_info "Using region override: $PARSED_REGION (instead of default: $SSO_REGION)"
  else
    log_info "Using default region: $SSO_REGION"
  fi

  # Configure the profile
  log_info "Configuring AWS profile: $PROFILE_NAME"
  # Fix SC2086: Double quote to prevent globbing and word splitting
  aws configure set "profile.${PROFILE_NAME}.sso_start_url" "$SSO_START_URL"
  aws configure set "profile.${PROFILE_NAME}.sso_region" "$SSO_REGION"
  aws configure set "profile.${PROFILE_NAME}.region" "$EFFECTIVE_REGION"
  aws configure set "profile.${PROFILE_NAME}.output" "json"

  # Check cached credentials
  log_info "üîç Checking cached SSO credentials..."
  token_file=$(find_token_file)

  if [[ -n "$token_file" && -f "$token_file" ]] && \
     jq -e '.startUrl == "'"$SSO_START_URL"'"' "$token_file" > /dev/null && \
     is_token_valid "$token_file"; then
    log_info "‚úÖ Cached credentials are valid."
  else
    log_warn "‚ö†Ô∏è Initiating AWS SSO login..."
    # Filter out the "tcgetpgrp failed" message while preserving other errors
    aws sso login --profile "$PROFILE_NAME" 2> >(grep -v "tcgetpgrp failed: Not a tty" >&2)
    token_file=$(find_token_file)

    if [[ -z "$token_file" || ! -f "$token_file" ]]; then
      log_error "‚ùå Failed to retrieve cache file after login."
      exit 1
    fi
    log_info "‚úÖ Successfully retrieved new cache file."
  fi

  # Get access token and fetch accounts
  access_token=$(jq -r 'select(.startUrl=="'"$SSO_START_URL"'") | .accessToken' "$token_file")
  if [[ -z "$access_token" || "$access_token" == "null" ]]; then
    log_error "‚ùå Failed to get access token from SSO cache file: $token_file"
    if [[ -f "$token_file" ]]; then
        actual_start_url_in_file=$(jq -r '.startUrl' "$token_file" 2>/dev/null)
        if [[ -n "$actual_start_url_in_file" && "$actual_start_url_in_file" != "$SSO_START_URL" ]]; then
            log_error "Mismatched SSO Start URLs!"
            log_error "  Expected (from .env): $SSO_START_URL"
            log_error "  Found in token file ($token_file): $actual_start_url_in_file"
            log_warn "This often happens if your SSO configuration has changed."
            log_info "Please run 'aws sso logout' for all relevant profiles, then try 'authaws $PROFILE_NAME' again."
        else
            log_warn "The token file ($token_file) for $SSO_START_URL does not contain a valid accessToken."
            log_debug "Contents of token file ($token_file) that failed accessToken extraction:"
            # Log the content for debugging to the script's log file
            echo "--- Token File Content ($token_file) ---" >> "$LOG_FILE"
            jq '.' "$token_file" >> "$LOG_FILE" 2>&1 || echo "jq failed to parse token file" >> "$LOG_FILE"
            echo "--- End Token File Content ---" >> "$LOG_FILE"
            log_info "Consider running 'aws sso logout' and then 'authaws $PROFILE_NAME' again."
        fi
    else
        log_debug "Token file $token_file not found during accessToken extraction (this should have been caught earlier)."
    fi
    exit 1
  fi

  log_info "üìã Fetching available accounts..."
  accounts_json=$(aws sso list-accounts --access-token "$access_token" --region "$SSO_REGION" --output json) || {
    log_error "Failed to list accounts."
    exit 1
  }

  # Basic fzf border option that works on all versions
  FZF_BORDER="--border"

  # Select account
  log_info "Please select an AWS account:"
  # IMPORTANT: The following fzf preview commands use single quotes intentionally.
  # shellcheck disable=SC2016
  # Single quotes are needed for fzf previews as expressions should be evaluated by fzf,
  # not by the shell when the command is executed.
  selected_account=$(echo "$accounts_json" | \
    jq -r '.accountList[] | "\(.accountId)|\(.accountName)"' | \
    sort | \
    column -t -s '|' | \
    fzf --header="Select AWS Account" \
        --preview 'echo "Account ID: $(echo {} | awk '\''{print $1}'\'')"; echo "Name: $(echo {} | cut -d" " -f2-)"' \
        --preview-window=right:40%:wrap \
        $FZF_BORDER \
        --height=20% \
        --layout=reverse) || { log_error "‚ùå No account selected"; exit 1; }

  account_id=$(echo "$selected_account" | awk '{print $1}')
  account_name=$(echo "$selected_account" | cut -d' ' -f2-)

  # Get roles for the selected account
  log_info "Fetching available roles for account: $account_name"
  roles_json=$(aws sso list-account-roles --access-token "$access_token" --account-id "$account_id" --region "$SSO_REGION" --output json)

  # Select role with preview window
  log_info "Please select a role:"
  # shellcheck disable=SC2016
  # Again, single quotes are used intentionally for the fzf preview command
  selected_role=$(echo "$roles_json" | \
    jq -r '.roleList[] | "\(.roleName)"' | \
    sort | \
    fzf --header="Select Role" \
        --preview 'echo "Role: {}"; echo "Account: '"$account_name"'"; echo "Account ID: '"$account_id"'"' \
        --preview-window=right:40%:wrap \
        $FZF_BORDER \
        --height=20% \
        --layout=reverse) || { log_error "‚ùå No role selected"; exit 1; }

  # Update profile
  log_info "Updating AWS profile with selected account and role..."
  # Fix SC2086: Double quote to prevent globbing and word splitting
  aws configure set "profile.${PROFILE_NAME}.sso_account_id" "$account_id"
  aws configure set "profile.${PROFILE_NAME}.sso_role_name" "$selected_role"

  # Print success message
  echo ""
  log_info "üéâ Successfully configured AWS SSO profile."
  log_info "----------------------------------------"
  log_info "Account: $account_name"
  log_info "Role: $selected_role"
  log_info "Profile: $PROFILE_NAME"
  log_info "Region: $EFFECTIVE_REGION"
  log_info ""
  log_info "To use this profile, run:"
  log_info "export AWS_PROFILE=$PROFILE_NAME AWS_DEFAULT_REGION=$EFFECTIVE_REGION"
  log_info ""
  log_info "To view your credentials, run:"
  log_info "authaws creds $PROFILE_NAME"
  log_completion "authaws"
}

# Run main function with all arguments
main "$@"