# AWS SSM Session Manager Helper Script
# Version: 1.3.0
# Repository: https://github.com/ZSoftly/ztiaws

set -e  # Exit on error
set -u  # Exit on undefined variables

# Get SCRIPT_DIR and source utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source utilities (like colors)
if [ -f "${SCRIPT_DIR}/src/utils.sh" ]; then
    # shellcheck source=./src/utils.sh
    source "${SCRIPT_DIR}/src/utils.sh"
elif [ -f "/usr/local/bin/src/utils.sh" ]; then # For system-wide installation
    # shellcheck source=/dev/null
    source "/usr/local/bin/src/utils.sh"
else
    # utils.sh is mandatory
    echo "[ERROR] src/utils.sh not found. This script requires utils.sh for color definitions and common functions." >&2
    echo "Please ensure src/utils.sh is present in the script directory or in /usr/local/bin/src/." >&2
    exit 1
fi

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Import regions from regions.sh
if [ -f "${SCRIPT_DIR}/src/regions.sh" ]; then
    # shellcheck source=./src/regions.sh
    source "${SCRIPT_DIR}/src/regions.sh"
elif [ -f "/usr/local/bin/src/regions.sh" ]; then
    # shellcheck source=/dev/null
    source "/usr/local/bin/src/regions.sh"
else
    echo "Error: Could not find src/regions.sh in either ${SCRIPT_DIR}/src/ or /usr/local/bin/src/" >&2
    exit 1
fi

# Import run_command functions
if [ -f "${SCRIPT_DIR}/src/run_command.sh" ]; then
    # shellcheck source=./src/run_command.sh
    source "${SCRIPT_DIR}/src/run_command.sh"
elif [ -f "/usr/local/bin/src/run_command.sh" ]; then
    # shellcheck source=/dev/null
    source "/usr/local/bin/src/run_command.sh"
else
    echo "Error: Could not find src/run_command.sh in either ${SCRIPT_DIR}/src/ or /usr/local/bin/src/" >&2
    exit 1
fi

# Function to show usage
usage() {
    cat << EOF
AWS SSM Session Manager Helper
Usage: ssm [region] [instance-id]
  ssm [instance-id]        # Uses default region (Canada Central)

Commands:
  ssm install              # Show installation instructions
  ssm version              # Show version information
  ssm check                # Check system requirements
  ssm exec [options]        # Run a command on an instance
  ssm exec-tagged [options] # Run a command on instances by tag
  ssm start <region> <instance-id>             # Start a stopped instance
  ssm stop <region> <instance-id>              # Stop a running instance
  ssm reboot <region> <instance-id>            # Reboot an instance
  ssm start-tagged <region> <tag-key> <tag-value>   # Start instances by tag
  ssm stop-tagged <region> <tag-key> <tag-value>    # Stop instances by tag
  ssm reboot-tagged <region> <tag-key> <tag-value>  # Reboot instances by tag


Run Command Options:
  ssm exec <region> <instance-id> "<command>"
  ssm exec-tagged <region> <tag-key> <tag-value> "<command>"

Examples:
  ssm cac1                             # List instances in Canada Central
  ssm use1 i-1234                      # Connect to instance in US East
  ssm i-1234                           # Connect to instance in Canada Central
  ssm exec cac1 i-1234 "systemctl status nginx"   # Run command on instance
  ssm exec-tagged use1 Role web "df -h" # Run command on instances with tag Role=web
EOF
}

# Version information
VERSION="1.3.0"
show_version() {
    echo "AWS SSM Helper version: $VERSION"
}

# Detect OS and package manager
detect_os() {
    if [ -f /etc/os-release ]; then
        # shellcheck source=/dev/null
        . /etc/os-release
        OS=$NAME
        VERSION=$VERSION_ID
    else
        OS=$(uname -s)
        VERSION=$(uname -r)
    fi
}

# Check system requirements
check_requirements() {
    local missing_deps=0

    # Check AWS CLI
    if ! command -v aws >/dev/null 2>&1; then
        log_error "AWS CLI is not installed"
        log_info "Please install AWS CLI by following the official documentation:"
        log_info "https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
        log_info "Choose your platform and follow the installation steps provided"
        missing_deps=1
    fi

    # Check SSM plugin
    if ! command -v session-manager-plugin >/dev/null 2>&1; then
        log_error "AWS Session Manager plugin is not installed"
        log_info "Would you like to auto-install it? (yes/no): "
        read -r response
        if [[ "$response" =~ ^[Yy](es)?$ ]]; then
            install_ssm_plugin
        else
            log_info "Please install the Session Manager plugin by following the official documentation:"
            log_info "https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"
        missing_deps=1
        fi
    fi

    # Check jq
    if ! command -v jq >/dev/null 2>&1; then
        log_error "jq is not installed"
        log_info "jq is required for robust parsing of AWS command output."
        log_info "Please install jq. Examples:"
        log_info "  Ubuntu/Debian: sudo apt-get install jq"
        log_info "  macOS: brew install jq"
        log_info "  Other: https://stedolan.github.io/jq/download/"
        missing_deps=1
    fi

    # Check AWS credentials
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        log_error "AWS credentials are not configured or invalid"
        log_info "Run 'aws configure' to set up your credentials"
        missing_deps=1
    fi

    if [ $missing_deps -eq 0 ]; then
        log_info "All requirements met!"
    else
        return 1
    fi
}

# Install SSM plugin based on OS
install_ssm_plugin() {
    detect_os
    log_info "Installing SSM plugin for $OS..."
    
    case $OS in
        *"Red Hat"*|*"Fedora"*)
            sudo curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin" -o "/usr/local/bin/session-manager-plugin"
            sudo chmod +x /usr/local/bin/session-manager-plugin
            ;;
        *"Ubuntu"*|*"Debian"*)
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            sudo dpkg -i session-manager-plugin.deb
            rm session-manager-plugin.deb
            ;;
        *)
            log_error "Unsupported OS: $OS"
            log_info "Please visit: https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"
            exit 1
            ;;
    esac
    
    if command -v session-manager-plugin >/dev/null 2>&1; then
        log_info "SSM plugin installed successfully!"
    else
        log_error "Failed to install SSM plugin"
        exit 1
    fi
}

# Default region
REGION="ca-central-1"

# Validate instance ID format
validate_instance_id() {
    if ! [[ $1 =~ ^i-[a-zA-Z0-9]{8,}$ ]]; then
        log_error "Invalid instance ID format. Should be i-xxxxxxxx"
        return 1
    fi
    return 0
}

# Exec command handler
handle_exec_command() {
    # Check if we have all required arguments
    if [ $# -lt 3 ]; then
        log_error "Missing required parameters for exec command"
        echo "Usage: ssm exec <region> <instance-id> \"<command>\""
        exit 1
    fi

    local region_code="$1"
    local instance_id="$2"
    local command="$3"
    
    # Convert region code to AWS region name
    local region
    region=$(get_region "$region_code")
    if [ "$region" = "invalid" ]; then
        log_error "Invalid region code: $region_code"
        exit 1
    fi
    
    # Validate instance ID
    if ! validate_instance_id "$instance_id"; then
        exit 1
    fi
    
    # Run the command
    run_remote_command "$instance_id" "$region" "$command"
    return $?
}

# Run command by tag handler
handle_exec_tagged_command() {
    # Check if we have all required arguments
    if [ $# -lt 4 ]; then
        log_error "Missing required parameters for exec-tagged command"
        echo "Usage: ssm exec-tagged <region> <tag-key> <tag-value> \"<command>\""
        exit 1
    fi

    local region_code="$1"
    local tag_key="$2"
    local tag_value="$3"
    local command="$4"
    
    # Convert region code to AWS region name
    local region
    region=$(get_region "$region_code")
    if [ "$region" = "invalid" ]; then
        log_error "Invalid region code: $region_code"
        exit 1
    fi
    
    # Run the command by tag
    run_remote_command_tagged "$tag_key" "$tag_value" "$region" "$command"
    return $?
}

# Instance ID based actions
handle_power_action() {
    if [ $# -ne 3 ]; then
        log_error "Usage: ssm <start|stop|reboot> <region> <instance-id>"
        exit 1
    fi

    local action="$1"
    local region_code="$2"
    local instance_id="$3"

    local region
    region=$(get_region "$region_code")
    if [ "$region" = "invalid" ]; then
        log_error "Invalid region code: $region_code"
        exit 1
    fi

    validate_instance_id "$instance_id" || exit 1

    perform_instance_action "$action" "$region" "$instance_id"
}

# Tag-based actions
handle_power_action_tagged() {
    if [ $# -ne 4 ]; then
        log_error "Usage: ssm <start|stop|reboot>-tagged <region> <tag-key> <tag-value>"
        exit 1
    fi

    local action="$1"
    local region_code="$2"
    local tag_key="$3"
    local tag_value="$4"

    local region
    region=$(get_region "$region_code")
    if [ "$region" = "invalid" ]; then
        log_error "Invalid region code: $region_code"
        exit 1
    fi

    # Fetch instance IDs matching tag
    local instance_ids
    instance_ids=$(aws ec2 describe-instances \
        --region "$region" \
        --filters "Name=tag:$tag_key,Values=$tag_value" \
                  "Name=instance-state-name,Values=running,stopped" \
        --query "Reservations[].Instances[].InstanceId" \
        --output text)

    if [ -z "$instance_ids" ]; then
        log_warn "No instances found with tag $tag_key=$tag_value in $region."
        return 1
    fi

    # Call action
    perform_instance_action "$action" "$region" $instance_ids
}




# Main logic
main() {
    # Handle special commands first
    case "${1:-}" in
    "version")
        show_version
        exit 0
        ;;
    "install")
        log_info "Installation Instructions:"
        echo
        log_info "1. AWS CLI Installation:"
        echo "   Visit: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
        echo "   Follow the instructions for your platform"
        echo
        log_info "2. Session Manager Plugin:"
        echo "   Run 'ssm check' to install the plugin interactively"
        echo "   Or visit: https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"
        exit 0
        ;;
    "check")
        check_requirements
        exit 0
        ;;
    "help" | "-h" | "--help")
        usage
        exit 0
        ;;
    "exec")
        shift
        handle_exec_command "$@"
        exit $?
        ;;
    "exec-tagged")
        shift
        handle_exec_tagged_command "$@"
        exit $?
        ;;
    "start")
        shift
        handle_power_action "start" "$@"
        exit $?
        ;;
    "stop")
        shift
        handle_power_action "stop" "$@"
        exit $?
        ;;
    "reboot")
        shift
        handle_power_action "reboot" "$@"
        exit $?
        ;;
    "start-tagged")
        shift
        handle_power_action_tagged "start" "$@"
        exit $?
        ;;
    "stop-tagged")
        shift
        handle_power_action_tagged "stop" "$@"
        exit $?
        ;;
    "reboot-tagged")
        shift
        handle_power_action_tagged "reboot" "$@"
        exit $?
        ;;
    *)
        log_error "Unknown command: ${1:-}"
        usage
        exit 1
        ;;
esac


    # Check requirements before proceeding
    if ! check_requirements >/dev/null 2>&1; then
        log_error "System requirements not met. Run 'ssm check' for details"
        exit 1
    fi

    # Regular command processing
    if [ $# -eq 0 ]; then
        usage
        exit 1

    elif [ $# -eq 1 ]; then
        region=$(get_region "$1")
        if [ "$region" != "invalid" ]; then
            REGION="$region"
            log_info "Listing instances in $REGION..."
            aws ec2 describe-instances --region "$REGION" \
                --query "Reservations[*].Instances[*].{
                    Name: Tags[?Key=='Name'].Value | [0],
                    InstanceId: InstanceId,
                    IP: PrivateIpAddress,
                    State: State.Name,
                    OS: PlatformDetails
                }" \
                --output table
            echo -e "\nUsage: ssm $1 <instance-id>"
        else
            if ! validate_instance_id "$1"; then
                exit 1
            fi
            log_info "Connecting to instance $1 in $REGION..."
            aws ssm start-session \
                --region "$REGION" \
                --target "$1"
        fi

    elif [ $# -eq 2 ]; then
        region=$(get_region "$1")
        if [ "$region" != "invalid" ]; then
            REGION="$region"
            validate_instance_id "$2" || exit 1
            log_info "Connecting to instance $2 in $REGION..."
            aws ssm start-session --region "$REGION" --target "$2"
        else
            log_error "Invalid region: $1"
            usage
            exit 1
        
        fi
     fi   
}

# Run main function
main "$@"
