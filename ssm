#!/usr/bin/env bash

# AWS SSM Session Manager Helper Script
# Version: 1.3.1 (Dynamic Region Support)
# Repository: https://github.com/ZSoftly/ztiaws

set -e  # Exit on error
set -u  # Exit on undefined variables

# Get SCRIPT_DIR and source utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source utilities (like colors)
if [ -f "${SCRIPT_DIR}/src/utils.sh" ]; then
    source "${SCRIPT_DIR}/src/utils.sh"
elif [ -f "/usr/local/bin/src/utils.sh" ]; then
    source "/usr/local/bin/src/utils.sh"
else
    echo "[ERROR] src/utils.sh not found. Required for colors and functions." >&2
    exit 1
fi

# Import regions from regions.sh
if [ -f "${SCRIPT_DIR}/src/regions.sh" ]; then
    source "${SCRIPT_DIR}/src/regions.sh"
elif [ -f "/usr/local/bin/src/regions.sh" ]; then
    source "/usr/local/bin/src/regions.sh"
else
    echo "Error: Could not find src/regions.sh" >&2
    exit 1
fi

# Import run_command functions
if [ -f "${SCRIPT_DIR}/src/run_command.sh" ]; then
    source "${SCRIPT_DIR}/src/run_command.sh"
elif [ -f "/usr/local/bin/src/run_command.sh" ]; then
    source "/usr/local/bin/src/run_command.sh"
else
    echo "Error: Could not find src/run_command.sh" >&2
    exit 1
fi

# Logging
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Default region
REGION="ca-central-1"

validate_instance_id() {
    [[ $1 =~ ^i-[a-zA-Z0-9]{8,}$ ]]
}

usage() {
    cat << EOF
AWS SSM Session Manager Helper
Usage: ssm [region] [instance-id]
       ssm [instance-id]        # Uses default region ($REGION)

Commands:
  ssm install              # Installation instructions
  ssm version              # Version info
  ssm check                # Check system requirements
  ssm exec <region> <instance-id> "<command>"
  ssm exec-tagged <region> <tag-key> <tag-value> "<command>"
EOF
}

show_version() { echo "AWS SSM Helper version 1.3.1"; }

check_requirements() {
    command -v aws >/dev/null || { log_error "AWS CLI missing"; exit 1; }
    command -v session-manager-plugin >/dev/null || { log_error "Session Manager Plugin missing"; exit 1; }
    command -v jq >/dev/null || { log_error "jq missing"; exit 1; }
}

handle_exec_command() {
    [ $# -ge 3 ] || { log_error "Usage: ssm exec <region> <instance-id> \"<command>\""; exit 1; }
    local region_code="$1" instance_id="$2" command="$3"
    local region="$(get_region "$region_code")"

    [[ "$region" == "invalid" ]] && { log_error "Invalid region code: $region_code"; exit 1; }
    validate_instance_id "$instance_id" || { log_error "Invalid instance ID"; exit 1; }
    run_remote_command "$instance_id" "$region" "$command"
}

handle_exec_tagged_command() {
    [ $# -ge 4 ] || { log_error "Usage: ssm exec-tagged <region> <tag-key> <tag-value> \"<command>\""; exit 1; }
    local region_code="$1" tag_key="$2" tag_value="$3" command="$4"
    local region="$(get_region "$region_code")"

    [[ "$region" == "invalid" ]] && { log_error "Invalid region code: $region_code"; exit 1; }
    run_remote_command_tagged "$tag_key" "$tag_value" "$region" "$command"
}

main() {
    case "${1:-}" in
        version) show_version; exit 0 ;;
        install) echo "See AWS CLI & Session Manager install guides"; exit 0 ;;
        check) check_requirements; exit 0 ;;
        exec) shift; handle_exec_command "$@" ;;
        exec-tagged) shift; handle_exec_tagged_command "$@" ;;
        *)
            check_requirements
            if [ $# -eq 1 ]; then
                region_resolved="$(get_region "$1")"
                if [[ "$region_resolved" != "invalid" ]]; then
                    log_info "Listing instances in $region_resolved..."
                    aws ec2 describe-instances --region "$region_resolved" --query "Reservations[*].Instances[*].{Name: Tags[?Key=='Name'].Value | [0], InstanceId: InstanceId, IP: PrivateIpAddress, State: State.Name}" --output table
                elif validate_instance_id "$1"; then
                    log_info "Connecting to $1 in default region $REGION..."
                    aws ssm start-session --region "$REGION" --target "$1"
                else
                    usage; exit 1
                fi
            elif [ $# -eq 2 ]; then
                region_resolved="$(get_region "$1")"
                validate_instance_id "$2" || { log_error "Invalid instance ID"; exit 1; }
                [[ "$region_resolved" == "invalid" ]] && { log_error "Invalid region code"; exit 1; }
                log_info "Connecting to $2 in $region_resolved..."
                aws ssm start-session --region "$region_resolved" --target "$2"
            else
                usage; exit 1
            fi
    esac
}

main "$@"
