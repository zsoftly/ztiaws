#!/usr/bin/env bash

set -e
set -u

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source utilities
if [ -f "${SCRIPT_DIR}/src/utils.sh" ]; then
    source "${SCRIPT_DIR}/src/utils.sh"
elif [ -f "/usr/local/bin/src/utils.sh" ]; then
    source "/usr/local/bin/src/utils.sh"
else
    echo "[ERROR] src/utils.sh not found." >&2
    exit 1
fi

# Source regions
if [ -f "${SCRIPT_DIR}/src/regions.sh" ]; then
    source "${SCRIPT_DIR}/src/regions.sh"
elif [ -f "/usr/local/bin/src/regions.sh" ]; then
    source "/usr/local/bin/src/regions.sh"
else
    echo "[ERROR] regions.sh not found." >&2
    exit 1
fi

# Source run_command functions
if [ -f "${SCRIPT_DIR}/src/run_command.sh" ]; then
    source "${SCRIPT_DIR}/src/run_command.sh"
elif [ -f "/usr/local/bin/src/run_command.sh" ]; then
    source "/usr/local/bin/src/run_command.sh"
else
    echo "[ERROR] run_command.sh not found." >&2
    exit 1
fi

log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Validate region short code using regions.sh
validate_region() {
    [ "$(get_region "$1")" != "invalid" ]
}

usage() {
    cat << EOF
AWS SSM Session Manager Helper
Usage: ssm [region] [instance-id]
       ssm [instance-id]        # Uses default region (Canada Central)

Supported regions:
  cac1  - Canada Central (Montreal) [default]
  caw1  - Canada West (Calgary)
  use1  - US East (N. Virginia)
  use2  - US East (Ohio)
  usw1  - US West (N. California)
  usw2  - US West (Oregon)
  sae1  - South America (SÃ£o Paulo)
  euw1  - Europe (Ireland)
  euw2  - Europe (London)
  euw3  - Europe (Paris)
  euc1  - Europe Central (Frankfurt)
  euc2  - Europe Central (Zurich)
  eun1  - Europe North (Stockholm)
  eus1  - Europe South (Milan)
  eus2  - Europe South (Spain)
  aps1  - Asia Pacific (Mumbai)
  aps2  - Asia Pacific (Hyderabad)
  apse1 - Asia Pacific (Singapore)
  apse2 - Asia Pacific (Sydney)
  apse3 - Asia Pacific (Jakarta)
  apse4 - Asia Pacific (Melbourne)
  apne1 - Asia Pacific (Tokyo)
  apne2 - Asia Pacific (Seoul)
  apne3 - Asia Pacific (Osaka)
  mec1  - Middle East (UAE)
  mees1 - Middle East (Bahrain)
  afc1  - Africa (Cape Town)

Examples:
  ssm cac1                           # List instances in Canada Central
  ssm use1 i-1234                    # Connect to instance in US East
  ssm i-1234                         # Connect to instance in default region
  ssm exec cac1 i-1234 "uname -a"    # Run command on instance
  ssm exec-tagged use1 Role web "df" # Run command by tag
EOF
}

VERSION="1.3.0"

show_version() {
    echo "AWS SSM Helper version: $VERSION"
}

check_requirements() {
    local missing=0
    command -v aws >/dev/null 2>&1 || { log_error "AWS CLI not installed"; missing=1; }
    command -v session-manager-plugin >/dev/null 2>&1 || { log_error "SSM plugin not installed"; missing=1; }
    command -v jq >/dev/null 2>&1 || { log_error "jq not installed"; missing=1; }
    aws sts get-caller-identity >/dev/null 2>&1 || { log_error "Invalid AWS credentials"; missing=1; }

    [ "$missing" -eq 0 ] && log_info "All requirements met!" || exit 1
}

validate_instance_id() {
    [[ $1 =~ ^i-[a-zA-Z0-9]{8,}$ ]]
}

handle_exec_command() {
    local region_code="$1" instance_id="$2" command="$3"
    validate_region "$region_code" || { log_error "Invalid region code: $region_code"; exit 1; }
    validate_instance_id "$instance_id" || { log_error "Invalid instance ID"; exit 1; }
    run_remote_command "$instance_id" "$(get_region "$region_code")" "$command"
}

handle_exec_tagged_command() {
    local region_code="$1" tag_key="$2" tag_value="$3" command="$4"
    validate_region "$region_code" || { log_error "Invalid region code: $region_code"; exit 1; }
    run_remote_command_tagged "$tag_key" "$tag_value" "$(get_region "$region_code")" "$command"
}

main() {
    case "${1:-}" in
        version) show_version; exit 0 ;;
        help|-h|--help) usage; exit 0 ;;
        check) check_requirements; exit 0 ;;
        exec) shift; handle_exec_command "$@"; exit $? ;;
        exec-tagged) shift; handle_exec_tagged_command "$@"; exit $? ;;
    esac

    check_requirements

    if [ $# -eq 1 ]; then
        if validate_region "$1"; then
            local region
            region=$(get_region "$1")
            log_info "Listing instances in $region..."
            aws ec2 describe-instances --region "$region" \
                --query "Reservations[*].Instances[*].{Name: Tags[?Key=='Name'].Value | [0], InstanceId: InstanceId, IP: PrivateIpAddress, State: State.Name, OS: PlatformDetails}" \
                --output table
        elif validate_instance_id "$1"; then
            log_info "Connecting to $1 in default region..."
            aws ssm start-session --region "$(get_region cac1)" --target "$1"
        else
            usage; exit 1
        fi
    elif [ $# -eq 2 ]; then
        validate_region "$1" || { log_error "Invalid region"; exit 1; }
        validate_instance_id "$2" || { log_error "Invalid instance ID"; exit 1; }
        log_info "Connecting to $2 in $(get_region "$1")..."
        aws ssm start-session --region "$(get_region "$1")" --target "$2"
    else
        usage; exit 1
    fi
}

main "$@"
